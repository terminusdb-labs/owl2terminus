#!/usr/bin/env python3
from rdflib import RDF, RDFS, SKOS, OWL, BNode, Graph, term, Namespace
from rdflib.util import from_n3
import argparse
import sys
import json
import re

CLASS_REGISTRY = { 'owl:Thing' : { '@type' : 'Class', '@id' : 'owl:Thing' }}
PROPERTY_HIERARCHY = {}
INVERSE_PROPERTIES = {}
PROPERTY_REGISTRY = {}

def rdfList2list(node, g):
    elt = None
    lst = []
    while node != RDF.nil:
        elt = g.objects(node,RDF.first, unique=True).__next__()
        lst.append(elt)
        node = g.objects(node,RDF.rest, unique=True).__next__()
    return lst

def add_super_to_prop(prop,sup,g):
    global PROPERTY_HIERARCHY
    if prop.n3(g.namespace_manager) in PROPERTY_HIERARCHY:
        PROPERTY_HIERARCHY[prop.n3(g.namespace_manager)] += [sup.n3(g.namespace_manager)]
    else:
        PROPERTY_HIERARCHY[prop.n3(g.namespace_manager)] = [sup.n3(g.namespace_manager)]

def register_subclass(sub, class_name):
    if sub in CLASS_REGISTRY:
        class_document = CLASS_REGISTRY[sub]
    else:
        class_document = { '@type' : 'Class', '@id' : sub }

    if '@inherits' in class_document and class_name not in class_document['@inherits']:
        class_document['@inherits'].append(class_name)
    else:
        class_document['@inherits'] = [class_name]

    CLASS_REGISTRY[sub] = class_document

def register_classes(g):
    global CLASS_REGISTRY
    for cls in g.subjects(RDF.type, OWL.Class):
        class_name = cls.n3(g.namespace_manager)
        if class_name in CLASS_REGISTRY:
            class_document = CLASS_REGISTRY[class_name]
        else:
            class_document = { '@id' : class_name,
                               '@type' : "Class"}

        supers = []
        for sup in g.objects(cls,RDFS.subClassOf):
            supers.append(sup.n3(g.namespace_manager))
        if supers != []:
            if '@inherits' in class_document:
                for sup in supers:
                    if sup not in class_document['@inherits']:
                        class_document['@inherits'].append(sup)
            else:
                class_document['@inherits'] = supers

        for c in g.objects(cls,OWL.equivalentClass):
            for u in g.objects(c,OWL.unionOf):
                lst = [x.n3(g.namespace_manager) for x in rdfList2list(u,g)]
                for sub in lst:
                    register_subclass(sub, class_name)

        comment_list = []
        for c in g.objects(cls,SKOS.definition):
            comment_list.append(str(c))

        documentation_object = {}
        if comment_list != []:
            comment = ' '.join(comment_list)
            documentation_object['@description'] = comment

        label_list = []
        for l in g.objects(cls,RDFS.label,unique=True):
            label_list.append(str(l))
        if label_list != []:
            label = ' '.join(label_list)
            documentation_object['@label'] = label

        class_document['@documentation'] = documentation_object
        CLASS_REGISTRY[class_name] = class_document

def add_inverse_property(inv, prop, g):
    global INVERSE_PROPERTIES
    inv_name = inv.n3(g.namespace_manager)
    prop_name = prop.n3(g.namespace_manager)
    INVERSE_PROPERTIES[inv_name] = prop_name
    INVERSE_PROPERTIES[prop_name] = inv_name

def is_anonymous_class(cls):
    if isinstance(cls, BNode):
        return True
    else:
        return False

def register_anonymous_class(cls, g):
    union_of = []
    for u in g.objects(cls,OWL.unionOf):
        lst = [x.n3(g.namespace_manager) for x in rdfList2list(u,g)]
        for sub in lst:
            union_of.append(sub)
    union_of.sort()
    union_name = 'tdb:' + 'Or'.join([re.sub('[^:]*:', "", sub) for sub in union_of])

    for c in union_of + [union_name]:
        if not c in CLASS_REGISTRY:
            CLASS_REGISTRY[c] = { '@type' : 'Class', '@id' : c ,
                                  '@metadata' : { 'https://terminusdb.com':
                                                  { 'owl2terminus' :
                                                    { 'derived_class' : True }}}}
    for sub in union_of:
        if '@inherits' in CLASS_REGISTRY[sub]:
            if not union_name in CLASS_REGISTRY[sub]['@inherits']:
                CLASS_REGISTRY[sub]['@inherits'].append(union_name)
        else:
            CLASS_REGISTRY[sub]['@inherits'] = [union_name]
    return from_n3(union_name, nsm=g.namespace_manager)

def register_property_hierarchy(g):
    for prop in g.subjects(RDF.type, OWL.ObjectProperty):
        #eprint(f"property {prop.n3(g.namespace_manager)}")

        for sup in g.objects(prop, RDFS.subPropertyOf,unique=True):
            #eprint(f"add {prop} and {sup}")
            add_super_to_prop(prop, sup, g)

        for inv in g.objects(prop, OWL.inverseOf):
            add_inverse_property(inv, prop, g)

    for prop in g.subjects(RDF.type, OWL.DatatypeProperty):
        #eprint(f"property {prop.n3(g.namespace_manager)}")

        for sup in g.objects(prop, RDFS.subPropertyOf,unique=True):
            #eprint(f"add {prop} and {sup}")
            add_super_to_prop(prop, sup, g)

        for inv in g.objects(prop, OWL.inverseOf):
            add_inverse_property(inv, prop, g)

def flip_key(key):
    if key == 'domain':
        return 'range'
    else:
        return 'domain'

def prop_key(p, key, g, original):
    if p in PROPERTY_REGISTRY:
        record = PROPERTY_REGISTRY[p]
        if key in record:
            return record[key]
        else:
            # Can we obtain it from our supers?
            if p in PROPERTY_HIERARCHY:
                for sup in PROPERTY_HIERARCHY[p]:
                    result = prop_key(sup, key, g, original)
                    if result:
                        return result
            if original and key in INVERSE_PROPERTIES:
                new_key = flip_key(key)
                new_prop = INVERSE_PROPERTIES[key]
                # we don't want to flounder, so we only flip once
                result = prop_key(new_prop, new_key, g, False)
                if result:
                    return result
            return None

def property_domain(p, g):
    result = prop_key(p, 'domain', g, True)
    return result

def property_range(p, g):
    result = prop_key(p, 'range', g, True)
    return result

def register_properties(g):
    for prop in g.subjects(RDF.type, OWL.ObjectProperty):
        property_record = {'type' : 'ObjectProperty'}
        for domain in g.objects(prop, RDFS.domain):
            if is_anonymous_class(domain):
                domain = register_anonymous_class(domain, g)
            property_record['domain'] = domain.n3(g.namespace_manager)
        for rng in g.objects(prop, RDFS.range, unique=True):
            if is_anonymous_class(rng):
                rng = register_anonymous_class(rng, g)
            property_record['range'] = rng.n3(g.namespace_manager)

        comments = []
        for skos_comment in g.objects(prop, SKOS.definition):
            comments.append(str(skos_comment))
        for this_comment in g.objects(prop, RDFS.comment):
            comments.append(str(this_comment))
        if comments != []:
            property_record['comment'] = '\n'.join(comments)

        label = next(g.objects(prop, RDFS.label, unique=True))
        if label:
            property_record['label'] = str(label)

        PROPERTY_REGISTRY[prop.n3(g.namespace_manager)] = property_record

    for prop in g.subjects(RDF.type, OWL.DatatypeProperty):
        property_record = {'type' : 'DatatypeProperty'}
        for domain in g.objects(prop, RDFS.domain):
           property_record['domain'] = domain.n3(g.namespace_manager)
        for rng in g.objects(prop, RDFS.range, unique=True):
           property_record['range'] = rng.n3(g.namespace_manager)

        comments = []
        for skos_comment in g.objects(prop, SKOS.definition):
            comments.append(str(skos_comment))
        for this_comment in g.objects(prop, RDFS.comment):
            comments.append(str(this_comment))
        if comments != []:
            property_record['comment'] = '\n'.join(comments)

        label = next(g.objects(prop, RDFS.label, unique=True))
        if label:
            property_record['label'] = str(label)

        PROPERTY_REGISTRY[prop.n3(g.namespace_manager)] = property_record

def eprint(string):
    print(string, file=sys.stderr)

def add_properties_to_classes(g):
    for prop in PROPERTY_REGISTRY:
        prop_record = PROPERTY_REGISTRY[prop]

        domain = property_domain(prop, g)
        if domain is None:
            domain = OWL.Thing.n3(g.namespace_manager)

        rng = property_range(prop, g)
        if rng is None:
            if prop_record['type'] == 'DatatypeProperty':
                rng = RDF.PlainLiteral.n3(g.namespace_manager)
            else:
                rng = OWL.Thing.n3(g.namespace_manager)
        # memoize results (should speed up lookup)
        if domain:
            prop_record['domain'] = domain
        if rng:
            prop_record['range'] = rng

        cls = CLASS_REGISTRY[domain]
        if not '@documentation' in cls:
            cls['@documentation'] = {}
        doc_record = cls['@documentation']
        if not '@properties' in doc_record:
            doc_record['@properties'] = {}
        doc_property_record = doc_record['@properties']

        new_doc_record = {}
        if 'comment' in prop_record:
            new_doc_record['@comment'] = prop_record['comment']
        if 'label' in prop_record:
            new_doc_record['@label'] = prop_record['label']
        if new_doc_record != {}:
            doc_property_record[prop] = new_doc_record
        cls[prop] = { '@type' : 'Set', '@class': rng }

if __name__ == '__main__' :

    parser = argparse.ArgumentParser()
    parser.add_argument("file", help="input owl file")
    parser.add_argument("-f", "--format", default="turtle", help="input format of OWL file")
    args = parser.parse_args()

    TDB = Namespace("https://terminusdb.com/schema#")
    g = Graph()
    g.bind("tdb", TDB)
    g.parse(args.file, args.format)

    register_classes(g)
    register_property_hierarchy(g)
    register_properties(g)
    add_properties_to_classes(g)

    ctx = {'@type' : '@context',
           '@base' : 'iri://d/',
           '@schema' : 'http://id.loc.gov/ontologies/bibframe/'}
    for (name,iri) in g.namespace_manager.namespaces():
        ctx[name] = str(iri)
    print(json.dumps(ctx))

    for cls in CLASS_REGISTRY:
        print(json.dumps(CLASS_REGISTRY[cls]))
